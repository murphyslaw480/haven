module dau.graphics.spritesheet;

import std.string : format;
import std.algorithm;
import dau.engine;
import dau.util.jsonizer;
import dau.graphics.bitmap;

class SpriteSheet {
  mixin JsonizeMe;

  auto idxToRegion(int idx) const {
    int row = idx / numCols;
    assert(row < numRows, "spritesheet index %d is out of range".format(idx));
    int col = idx % numCols;
    return Rect2i(col * frameSize, row * frameSize, frameSize, frameSize);
  }

  auto nameToRegion(string name) const {
    int idx = sprites.countUntil(name);
    assert(idx >= 0, "no sprite named " ~ name);
    return idxToRegion(idx);
  }

  @property {
    int numRows() { return _bmp.width / frameSize; }
    int numCols() { return _bmp.height / frameSize; }
  }

  private:
  @jsonize const {
    void bitmap(string name) { _bmp = loadBitmap(name); }
    int frameSize;
    int frameTimeMs;
    string[] rows;
    string[] sprites;
  }

  Bitmap _bmp;
}

auto loadSpriteSheet() {
  assert(name in _spriteData, "could not find spritesheet " ~ name);
  return _spriteData[name];
}

private:
SpriteSheet[string] _spriteData;

void loadData() {
  _spriteData = Paths.spriteData.extract!(SpriteSheet[string]);
}

static this() {
  onInit(&loadData);
}
